-- TRUNCATE TABLE TABLE_NAME;
drop table if exists MEMBER CASCADE;
create table MEMBER              -- 회원 정보
(
 id         bigint generated by default as identity,    -- 고유 아이디
 user_id    varchar(30)     unique not null,            -- 사용자 아이디(닉네임)
 password   varchar(100)    not null,                   -- 암호화해서 저장
 name       varchar(15)     not null,                   -- 사용자 이름(실명)
 mail      varchar(100)    unique not null,            -- 중복 방지용 메일 인증      --> 지금은 mail로 쓰고 있는데 email로 변경해야함
 phone      varchar(12),                                -- 하이픈 빼고 저장 / 핸드폰은 나중에 필수 값 처리 -> 아직 입력하는 화면도 없음
 cdt        datetime,                                   -- 생성일자
 primary key (id)
);

drop table if exists TRAVEL CASCADE;
create table TRAVEL       -- 여행 정보
(
 travel_id      int generated by default as identity,    -- 얘 때문에 Master/Detail 나눠야 할듯..
 title          varchar(100),               -- 그룹핑 할 제목, 필요할거 같은데..
 oid            bigint  NULL,               -- 원조자      => 나중에 복사하는 경우 최초 생성자 id값 계속 들고가게 해서 원조(?) 판별
 cid            bigint,                     -- 생성자      => 나중에 복사하는 경우 최초 생성자 id값 계속 들고가게 해서 원조(?) 판별
 cdt            datetime,                   -- 생성 일자
 primary key (travel_id),
 FOREIGN KEY (oid) REFERENCES MEMBER(id),
 FOREIGN KEY (cid) REFERENCES MEMBER(id)
 --CONSTRAINT fk_parent FOREIGN KEY (parent_id) REFERENCES parent_table(id)
);

drop table if exists LOCATION CASCADE;
create table LOCATION                           -- 지도 정보 (마커, 순번)
(
 --location_id        bigint AUTO_INCREMENT PRIMARY KEY ,            -- 아래와 동일 증가 자동으로 증가시키면서 --> 근데 이걸.. 자동으로 증가시키는거보다 프론트에서 값을 받아서 저장하는게 안전하지 않나.. 중간에 값이 틀어질 일도 없고..?
 --location_id        bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY ,            -- travel_id 번호 받아와서 그 값 부터 1부터 증가시키면서 할 수 있나..? -> 설정함 테스트 확인
 travel_id          bigint not null,            -- 여행 번호(LOCATION_STORAGE_M에서 넘겨 받아야함)
 location_id        bigint not null,                     -- 위 문제 없애기 위해서 화면에서 +/- 버튼 눌렀을 때 증가하게 하고, 여기선 그냥 PK로 값을 받아서 처리
 latitude           double not null,            -- 위도
 longitude          double not null,            -- 경도
 CONSTRAINT PK_LOCATION primary key (travel_id, location_id),
 --foreign key (travel_id) references TRAVEL(travel_id)     -- 이거 주석하고 정상 저장됨... FK 참조관계에 대한 DB 공부 필요
);

drop table if exists LOCATION_DETAIL CASCADE;
create table LOCATION_DETAIL         -- 여행 계획D
(
 travel_id      bigint not null,            --        // 마스터에서 넘겨 받아야함
 location_id    bigint not null,
 location_sq    bigint not null,
 --location_sq    bigint AUTO_INCREMENT PRIMARY KEY,
 content        varchar(max),
 cid            bigint,                     -- 생성자
 cdt            datetime,                   -- 생성 일자
 CONSTRAINT PK_LOCATION_DETAIL primary key (travel_id, location_id, location_sq),
 --foreign key (travel_id) references TRAVEL(travel_id),
 --foreign key (travel_id, location_id) references LOCATION(travel_id, location_id)     -- 이거 주석하고 정상 저장됨... FK 참조관계에 대한 DB 공부 필요
);

drop table if exists FRIENDSHIP CASCADE;
create table FRIENDSHIP         -- 사용자 관게 테이블
(
 id             bigint generated by default as identity primary key,            -- Detail       // 마스터에서 넘겨 받아야함
 member_id      bigint not null,
 friend_id      bigint not null,
 status         varchar(10),                     -- pending(대기), accepted(수락), declined(거부)
 cdt            datetime,                   -- 생성 일자
 foreign key (member_id) references MEMBER(id),
 foreign key (friend_id) references MEMBER(id)
);

drop table if exists MODIFY_TABLE CASCADE;
create table MODIFY_TABLE         -- 사용자 관게 테이블
(
 id             bigint AUTO_INCREMENT primary key,            -- Detail       // 마스터에서 넘겨 받아야함
 table_name     varchar(30) not null,   -- 테이블 정보
 column_name    varchar(30) not null,   -- 컬럼 정보
 class_name     varchar(30) not null,   -- 어떤 클래스에서 호출 됐나
 method_name    varchar(30) not null,   -- 어떤 메서드를 통해 호출 됐나
 pre_data       varchar(300) not null,  -- 기존 데이터
 post_data       varchar(300) not null,  -- 변경 데이터
 mid            bigint,                 -- 수정자
 mdt            datetime               -- 수정일자
);

DROP TABLE IF EXISTS UPLOADED_FILE CASCADE;
CREATE TABLE UPLOADED_FILE
(
 FILE_ID                BIGINT AUTO_INCREMENT PRIMARY KEY,      -- 테이블 고유 ID
 USER_ID                BIGINT NOT NULL,                        -- 사용자 생성 ID
 TRAVEL_ID              BIGINT NOT NULL,                        -- 여행 생성 ID
 LOCATION_ID            BIGINT,                                 -- 마커별 ID
 ORIGINAL_FILE_NAME     VARCHAR(MAX) NOT NULL,                  -- 파일 이름
 SAVED_FILE_NAME        VARCHAR(MAX) NOT NULL,                  -- 파일 이름
 FILE_PATH              VARCHAR(MAX) NOT NULL                   -- 파일 저장 경로
);

DROP TABLE IF EXISTS POST CASCADE;
CREATE TABLE POST
(
 POST_ID                BIGINT AUTO_INCREMENT PRIMARY KEY,      -- 테이블 고유 ID
 CONTENT                VARCHAR(MAX),                           -- 게시글 내용
 CREATE_DATE            DATETIME NOT NULL,                        -- 여행 생성 ID
 UPDATE_DATE            DATETIME NOT NULL,                        -- 여행 생성 ID
 STATUS                 VARCHAR(30),                                 -- 마커별 ID
 VIEWS                  DOUBLE NOT NULL,                  -- 파일 이름
 LIKES                  DOUBLE NOT NULL,                  -- 파일 이름
 MEMBER_ID              BIGINT NOT NULL                   -- 파일 저장 경로
);

